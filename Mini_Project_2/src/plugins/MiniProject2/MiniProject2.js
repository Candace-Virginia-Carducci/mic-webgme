/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Wed Oct 19 2016 22:17:35 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (PluginConfig,
             pluginMetadata,
             PluginBase,
             indexHtmlContent,
             ejs,
             programJsTemplate) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);


    /**
     * Initializes a new instance of myExample.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin myExample.
     * @constructor
     */
    var MiniProject2 = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    MiniProject2.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    MiniProject2.prototype = Object.create(PluginBase.prototype);
    MiniProject2.prototype.constructor = MiniProject2;


    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    MiniProject2.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;


        // Using the coreAPI to make changes.

        nodeObject = self.activeNode;

        var artifact = self.blobClient.createArtifact('project-data');
        self.metaNodeInfo = {
            "metaNodes": []
        };
        self.treeNodeInfo = {};
        self.loadNodeMap(self.rootNode)
        // >> Meta Nodes
            .then(function (nodes) {
                //print heirarchy here
                self.printMetaNodes(nodes);
                var metaNodeInfoJson = JSON.stringify(self.metaNodeInfo, null, 2);
                //print hierarchy here
                var treeData = self.printTreeNodes(self.rootNode, nodes);
                var treeNodeInfoJson = JSON.stringify(treeData, null, 2);
                console.log(treeNodeInfoJson);
                return artifact.addFiles({'meta.json': metaNodeInfoJson,'tree.json':treeNodeInfoJson});
            })
            .then(function (fileHashs) {
                //self.result.addArtifact(fileHashs);
                return artifact.save()
            })
            .then(function (artifactHash) {
                self.result.addArtifact(artifactHash);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                self.logger.error(err.stack);
                // Result success is false at invocation.
                callback(err, self.result);
            });

    };

    MiniProject2.prototype.loadNodeMap = function (node) {
        var self = this;
        return self.core.loadSubTree(node)
            .then(function (nodeArr) {
                var nodes = {},
                    i;
                for (i = 0; i < nodeArr.length; i += 1) {
                    nodes[self.core.getPath(nodeArr[i])] = nodeArr[i];
                }
                return nodes;
            });
    };


    MiniProject2.prototype.printMetaNodes = function (nodes) {
        var self = this,
            path,
            name,
            node,
            isMeta,
            numCh;

        for (path in nodes) {
            isMeta = false;
            //get node by path
            node = nodes[path];
            //get node by name
            name = self.core.getAttribute(node, 'name')
            numCh = self.core.getChildrenPaths(node).length;
            
            //getting the base name
            var baseNode = self.core.getBase(node),
                baseName = baseNode ? self.core.getAttribute(baseNode, 'name') : 'null';

            //self.logger.info('Name:', name, ' has path:', path, 'isMetaNode:', isMeta,'base:', base ,'has', numCh, 'children');

            var meta = self.core.getBaseType(node);
            if(node === meta){
                isMeta = true;
            }

            if (isMeta) {
                //console.log('Name:', name, 'path:', path, 'isMetaNode:', isMeta ,'base:', baseName ,'has', numCh, 'children');
                self.metaNodeInfo.metaNodes.push({'Name:': name, 'path': path, 'base': baseName, 'children': numCh});
            }
        }
    };

    MiniProject2.prototype.printTreeNodes = function (root, nodes, parentData) {
        var self = this,
            nodeData = {},
            childrenPaths,
            childNode;

        var name,
            isMeta = false,
            relid = self.core.getRelid(root),
            metaType;

        childrenPaths = self.core.getChildrenPaths(root);
        name = self.core.getAttribute(root, 'name');

        //getting the base name
        var baseNode = self.core.getBase(root),
            baseName = baseNode ? self.core.getAttribute(baseNode, 'name') : 'null';

       // self.logger.info(name, 'has', childrenPaths.length, 'children', 'isMeta:', isMeta, 'MetaType:', metaType);

        //self.treeNodeInfo.push('name:',name)
        //self.treeNodeInfo.push( 'isMeta:', isMeta);
        //self.treeNodeInfo.push('MetaType:', metaType);


        var meta = self.core.getBaseType(root);
        if(root === meta){
            isMeta = true;
        }

        nodeData.name = name;
        nodeData.isMeta = isMeta;
        nodeData.base = baseName;
        nodeData.children = {};

        if (parentData) {
            parentData.children[relid] = nodeData;
        }

        for (var i = 0; i < childrenPaths.length; i += 1) {
            var path = childrenPaths[i];
            //self.logger.info('has path:', path);
            //self.treeNodeInfo.push('has path:', path);
            childNode = nodes[path];
            self.printTreeNodes(childNode, nodes, nodeData);
        }

        return nodeData;
    };


    return MiniProject2;
});
